= MOPs Move Along Spline Modifier =

#icon: opdef:.?mops_modifier_02.svg

"""Moves instances along a guide spline."""

This moves instances along a guide spline. The instances can maintain their starting position and orientation relative to the spline,
or they can be snapped onto it. This node can operate two ways: "Simple" mode, which procedurally computes the position of each instance
based on a "goal" attribute, or "Solver" mode, which incrementally pushes each instance along the curve based on a "speed" attribute.
In "Solver" mode, you can also generate trails from the instances.

NOTE:
    There are a couple presets for this node in the Tab menu. "Distribute" will automatically evenly distribute all of your packed primitives or points evenly along the spline. "Snap Group" will snap the centroid of all your packed primitives to the beginning of the spline, moving all of them together as a single group without modifying their pivots. These presets simply set a few attributes for you; the node interface is the same.

== Overview ==

@inputs

Packed Primitives:
    Plug in MOPs instances in here.
    
Spline:
    Plug in one or more splines (polylines or NURBs curves) to use as guides to move instances.

@parameters

== General ==

Mode:
    #id: mode
    The mode to use for animating the instances. "Simple" mode is fast and fully procedural, and uses a "goal" attribute to determine position. "Solver" mode is a slower simulation-based method that uses a "speed" attribute to move instances per timestep.
    
== Attach ==

These parameters determine how each instance is initially attached to the spline.

Curve Select Mode:
    #id: curve_select_mode
    How to choose the primitive to attach to. There are two modes:
    * Primitive Number: Use an attribute or an expression to define which spline primitive each instance attaches to.
    * Use Nearest: Automatically determine the nearest spline primitive per-instance and attach to it.

Primitive Number:
    #id: curve_num_expr
    The primitive number to attach to. This can either be a number or an expression referencing an attribute, such as "@prnum" 
    Use an expression if you want different instances to attach to different spline.
    
Attach Method:
    #id: attach_mode
    The method by which to attach instances to the spline(s). 
    * Nearest Point: Each instance is attached to the nearest point on the spline, per-instance.
    * Attribute: Instances will attach to the parameterized (0-1) position along the spline based on an attribute name (e.g. "mops_falloff").
    * Distribute: Instances will be evenly distributed based on their IDs.

Search Distance:
    #id: search_dist
    The maximum distance from the spline to search for instances to attach. Only available with "Nearest Point" Attach Method.
    
Attribute Name:
    #id: attach_attr
    The name of a point attribute to use for determining which instances are attached to which spline primitive number.
    This should be an integer point attribute.
    
Attach Time:
    #id: frame
    The frame at which the instances' attachment is computed. This can be locked to a particular frame in case the incoming instances
    or the splines are moving.
    
Resample Input Curve:
    #id: do_resample
    Resamples the input splines.
    
Reorient Input Curve:
    #id: do_reorient
    Create an orientation frame for the curve.
    
Snap MOPs Centroid to Curve Start:
    #id: do_snap
    Enables snapping of the centroid of the group of MOPs objects to the start of the spline.
    
=== Offset ===

Maintain Offset:
    #id: maintain_offset
    If objects are not directly on the spline when they're attached, this parameter acts on a scale on the distance from the spline. If this value is set to zero, the primitives will all sit directly on top of the spline regardless of their original positions.
    
Maintain Orient Offset:
    #id: orient_offset
    Rather than align each copy directly to the curve's orientation, this parameter will blend in the sum of the two orientations.
    
Offset Ramp:
    #id: offset_ramp
    This scales the Maintain Offset parameter based on the position of each primitive along the spline.
    
Orient Offset Ramp:
    #id: orient_offset_ramp
    This scales the Maintain Orient Offset parameter based on the position of each primitive along the spline.
    
=== Resample Curve ===

Refer to the [Resample|Node:sop/resample] SOP for documentation.

=== Orient Curve ===

Refer to the [MOPs Orient Curve|Node:sop/MOPS--Orient_Curve-1.0] SOP for documentation.

=== Snap Centroid ===

Do Orient Snap:
    #id: do_orient_snap
    Enable snapping of the MOPs so that they are oriented to the spline as a group.
    
Normal Axis:
    #id: normal_axis
    The normal axis to use for orientation snapping. This will differ based on how your MOPs objects are arranged. This should be a normalized vector, preferably orthogonal to the Up Axis.
    
Up Axis:
    #id: up_axis
    The up axis to use for orientation snapping. This will differ based on how your MOPs objects are arranged. This should be
    a normalized vector, preferably orthogonal to the Normal Axis.

== Animate ==

Start Frame:
    #id: startframe
    In Solver Mode, the frame to begin the simulation.
    
Wrap:
    #id: wrap
    Enables wrapping. Objects that pass beyond the end of the curve will reappear at the beginning.
    
Align to Curve:
    #id: do_rotate
    Objects will align themselves to follow the direction of motion along the spline.
    
Do Falloff:
    #id: do_falloff
    The mops_falloff attribute will act as a multiplier against the Goal U (Simple Mode) or the Speed (Solver Mode) of each instance.
    
Falloff Affects Rotation:
    #id: do_rotate_falloff
    If enabled, the mops_falloff attribute will affect how much of the curve's orientation affects each copy's orientation as it moves along the curve.
    
Falloff Attribute:
    #id: falloff_attr
    The float attribute to use (0-1) as falloff for this operation.
    
Update Attributes:
    #id: attrname
    A list of attributes to update during the animation. Incoming attributes from your geometry are frozen at the Attach Time. Updating attributes here is faster than using an expression ($F) for Attach Time.
    
Goal Type:
    #id: goal_type
    The way in which to interpret the Goal parameter. The default, Goal U, reads the Goal as a parameterized value between 0 and 1, representing the start and end of the curve. The alternate mode, Arc Length, reads the Goal value as a total distance traveled along the arc length of the spline.
    
Goal:
    #id: goal
    (Simple Mode only) The amount to add to each primitive's current position along the spline. If wrapping is enabled, a value of 1 will move every primitive back to its original position.
    
Speed:
    #id: speed
    (Solver mode only) The amount to add to each primitive's position along the spline, per timestep. 
    
Randomize:
    #id: random_shift
    The amount to randomize the goal position of each primitive. In Simple mode, this randomizes the Goal U. In Solver mode, this randomizes the speed.
    
Random Seed:
    #id: random_seed
    The random seed to use for the Randomize parameter.
    
    
=== Twist ===

Twist Amount:
    #id: post_twist_amount
    This applies a twisting effect to the primitives' positions as they animate along the spline, as if they were attached to the twisting spline by a wire.
    
Twist Ramp:
    #id: post_twist_ramp
    This scales the Twist Amount parameter based on the position of each primitive along the spline.
    
=== Acceleration ===

Acceleration Ramp:
    #id: acceleration_ramp
    (Solver Mode only) This scales the speed of instances based on the position of each primitive along the spline.
    
=== Trails ===

Create Trails:
    #id: do_trails
    (Solver Mode only) Creates trails that emit from the motion of each instance.

Trail Group Name:
    #id: trailgroup
    The name to use for the output trail primitive group.
    
Trails End Frame:
    #id: trails_end
    The end frame to use when computing trails. The trails simulation is run in its entirety and then clipped afterwards, to make the trails more stable. Choose the last frame of actual animation to better optimize the simulation.
    
=== VEXpressions ===

Use VEXpressions:
    #id: do_vexpression
    Enable the use of VEXpressions for modifying various parameters per-primitive. Use the commented defaults in the VEXpression parameter for examples of what can be modified.
    
